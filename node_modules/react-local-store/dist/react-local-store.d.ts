import * as React from 'react';
export interface IAction {
    type: string;
    payload?: any;
    error?: boolean;
    meta?: object;
}
export interface IState {
    [prop: string]: any;
}
export declare type Context = [any, React.Dispatch<IAction>];
export interface ILocalStoreProvider {
    children?: React.ReactElement;
    name?: string;
    sync?: boolean;
    initialState?: IState;
    reducer?: React.Reducer<IState, IAction>;
}
export declare function LocalStoreProvider({ children, name, sync, initialState, reducer }: ILocalStoreProvider): JSX.Element;
export declare function useLocalStore(name?: string): Context;
export declare function createLocalStore(presetProps?: ILocalStoreProvider | {
    name?: string;
}): [(props: ILocalStoreProvider) => JSX.Element, () => Context];
